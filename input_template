import pandas as pd
import numpy as np
import logging
import sys
import re
import tkinter as tk
from tkinter import ttk
from pathlib import Path
import time

class InputTemplateFile:
    def __init__(self, out_fname=f"input_template_.xlsx"):
        self.out_fname = re.search(r"[\d\D]*\.", out_fname).group() + 'xlsx'
        self.setup_logging()
    
    def setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('input_template.log'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    def input_data_to_excel(self, is_empty=True):
        try:
            input_data = self.get_input(is_empty)
            df = pd.DataFrame(input_data)
            input_template_path = Path.cwd() / self.out_fname
            writer = pd.ExcelWriter(path=input_template_path, engine='xlsxwriter')
            df.to_excel(writer, index=False,)
            writer.close()
            return input_template_path
        except Exception as e:
            self.logger.error(str(e))
            raise
    
    def get_input(self, is_empty):
        input_data = {
            "no": [],
            "reg_number": [],
            "business_name": [],
            "address": [],
            "provinces": [],
            "district": [],
            "ward": [],
            "auth_cap": [],
            "status": [],
            "phone": [],
            "email": [],
            "legal_rep": [],
            "main_act": [],
            "all_act": [],
            "issue_date": [],
            "change_date": [],
            "model": [],
            "workforce": [],
            "co_fund": [],
            "shareholders": [],
            "domestic": []
        }
        try:
            if not is_empty:
                for category in input_data.keys():
                    data = input(f"Enter data for {category}: ")
                    input_data[category].append(data)
            self.logger.info("Exported query successfully")
            return input_data
        except Exception as e:
            self.logger.error(str(e))
            raise
    
    def __input_popup_format(self):
        ...

def main():
    ...

if __name__ == "__main__":
    test = InputTemplateFile()
    test.input_data_to_excel()